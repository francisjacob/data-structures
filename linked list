#include<iostream>
using namespace std;
struct node
{
    int x;
    node *next;
};
class linkedlist
{
    public:
    struct node *head=NULL;
    void insert(int a)
    {
        node *temp=new node();
        temp->x=a;
        temp->next=NULL;
        if(head==NULL)
            head=temp;
        else
        {
            node *temp1=head;
            while(temp1->next)
            {
                temp1=temp1->next;
            }
            temp1->next=temp;
        }
    }
    void insert(int a,int n)
    {
            node *temp=new node();
            temp->x=a;
            temp->next=NULL;
            if(head==NULL)
                head=temp;
            else
            {
                node *temp1=head;
                while(temp1->next && --n)
                {
                     temp1=temp1->next;
                }
                if(temp1->next==NULL)
                    temp1->next=temp;
                 else
                 {
                     node *temp2=temp1->next;
                     temp1->next=temp;
                     temp->next=temp2;
                 }
            }
    }
    void deletee(int a)
    {
        node *temp=head;
        node *prev=head;
        if(temp)
        {
            while(temp!=NULL)
            {
                if(temp->x==a)
                {
                    if(temp==head)
                    {
                        head=temp->next;
                        node *temp1=temp;
                        temp=temp->next;
                        prev=prev->next;
                        delete(temp1);
                    }
                    else
                    {
                        prev->next=temp->next;
                        node *temp1=temp;
                        temp=temp->next;
                        delete(temp1);
                    }
                }
                else
                {
                prev=temp;
                temp=temp->next;
                }
            }
        }
    }
    void reverse()
    {
        node *curr=head;
        node *m=NULL;
        node *t=NULL;
        if(head->next)
            m=head->next;
        else
            return;
        if(m->next)
            t=m->next;
        curr->next=NULL;
        while(t!=NULL)
        {
            m->next=curr;
            curr=m;
            m=t;
            t=m->next;
            head=curr;
        }
        m->next=curr;
        curr=m;
        head=curr;
    }
    node* detectloop()
    {
        node *slow, *fast;
        slow=head;
        fast=head;
        while(slow && fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            cout<<slow->x<<"\t"<<fast->x<<endl;
             if(slow==fast)
            {
                return slow;
            }
        }
       return NULL;
    }

    void traverse()
    {
        node *temp=head;
        while(temp)
        {
            cout<<temp->x<<endl;
            temp=temp->next;
        }
    }
};

int main()
{
    linkedlist a;
    a.insert(2);
    a.insert(7);
    a.insert(5);
    a.insert(99,3);
    a.insert(2);
    /*node *temp=new node();
    temp->x=7;
    node *temp1=a.head;
        while(temp1->next)
        {
           // cout<<temp->x<<endl;
            temp1=temp1->next;
        }
     temp1->next=temp;
    temp->next=a.head->next->next;
    */
    //a.head->next->next->next->next->next=a.head;
    //a.traverse();
//    a.deletee(2);
    cout<<endl;
    a.reverse();
    //node *x=a.detectloop();
   // cout<<x->x<<endl;
    //cout<<x->next->x;
  //  a.traverse();
    return 0;
}
